



BMWG                                                        R. Rosa, Ed.
Internet-Draft                                             C. Rothenberg
Intended status: Informational                                   UNICAMP
Expires: December 13, 2018                                    M. Peuster
                                                                 H. Karl
                                                                     UPB
                                                           June 11, 2018


              Methodology for VNF Benchmarking Automation
                      draft-rosa-bmwg-vnfbench-02

Abstract

   This document describes a common methodology for the automation of
   benchmarking Virtualized Network Functions (VNFs) in general-purpose
   hardware.  Specific cases of benchmarking methodologies for
   particular VNFs can be derived from this document.  An open source
   reference implementation called Gym is reported as a running code
   embodiment of the proposed methodology for VNFs.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 13, 2018.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect



Rosa, et al.            Expires December 13, 2018               [Page 1]

Internet-Draft                  VNFBench                       June 2018


   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  Scope . . . . . . . . . . . . . . . . . . . . . . . . . . . .   4
   4.  Considerations  . . . . . . . . . . . . . . . . . . . . . . .   4
   4.1.  VNF Testing Methods . . . . . . . . . . . . . . . . . . . .   4
   4.2.  Generic VNF Benchmarking Setup  . . . . . . . . . . . . . .   5
   4.3.  Deployment Scenarios  . . . . . . . . . . . . . . . . . . .   6
   4.4.  Influencing Aspects . . . . . . . . . . . . . . . . . . . .   7
   5.  Methodology . . . . . . . . . . . . . . . . . . . . . . . . .   8
   5.1.  VNF Benchmarking Descriptor (VNF-BD)  . . . . . . . . . . .   8
   5.1.1.  Procedures Configuration  . . . . . . . . . . . . . . . .   9
   5.1.2.  Target Information  . . . . . . . . . . . . . . . . . . .   9
   5.1.3.  Deployment Scenario . . . . . . . . . . . . . . . . . . .   9
   5.2.  VNF Performance Profile (VNF-PP)  . . . . . . . . . . . . .  10
   5.2.1.  Execution Environment . . . . . . . . . . . . . . . . . .  10
   5.2.2.  Measurement Results . . . . . . . . . . . . . . . . . . .  11
   5.3.  Automated Benchmarking Procedures . . . . . . . . . . . . .  11
   5.4.  Particular Cases  . . . . . . . . . . . . . . . . . . . . .  12
   6.  VNF Benchmark Report  . . . . . . . . . . . . . . . . . . . .  13
   7.  Open Source Reference Implementations . . . . . . . . . . . .  13
   7.1.  Gym . . . . . . . . . . . . . . . . . . . . . . . . . . . .  14
   7.2.  tng-prf . . . . . . . . . . . . . . . . . . . . . . . . . .  15
   8.  Security Considerations . . . . . . . . . . . . . . . . . . .  16
   9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  16
   10. Acknowledgement . . . . . . . . . . . . . . . . . . . . . . .  16
   11. References  . . . . . . . . . . . . . . . . . . . . . . . . .  16
   11.1.  Normative References . . . . . . . . . . . . . . . . . . .  16
   11.2.  Informative References . . . . . . . . . . . . . . . . . .  17
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  17

1.  Introduction

   Benchmarking Methodology Working Group (BMWG) initiated efforts,
   approaching considerations in [RFC8172], to develop methodologies for
   benchmarking VNFs.  Similarly described in [RFC8172], VNF benchmark
   motivating aspects define: (i) pre-deployment infrastructure
   dimensioning to realize associated VNF performance profiles; (ii)
   comparison factor with physical network functions; (iii) and output
   results for analytical VNF development.





Rosa, et al.            Expires December 13, 2018               [Page 2]

Internet-Draft                  VNFBench                       June 2018


   Having no strict and clear execution boundaries, different from
   earlier self-contained black-box benchmarking methodologies described
   in BMWG, a VNF depends on underlying virtualized environment
   parameters [ETS14a], intrinsic considerations for analysis when
   addressing performance.  This document stands as a ground methodology
   guide for VNF benchmarking automation.  It addresses the state-of-
   the-art publications and the current developments in similar
   standardization efforts (e.g., [ETS14c] and [RFC8204]) towards
   bechmarking VNFs.

   Automating the extraction of VNF performance metrics propitiates: (i)
   agile performance-focused DevOps methodologies for Continuous
   Integration and Development (CI/CD) of VNFs; (ii) on-demand VNF test
   descriptors for newcoming execution environments; (iii) a path for
   precise-analytics of extensively catalogued VNF profiles; (iv) and
   run-time profiling to assist VNF lifecycle orchestration/management
   workflows.

2.  Terminology

   Common benchmarking terminology contained in this document is derived
   from [RFC1242].  Also, the reader is assumed to be familiar with the
   terminology as defined in the European Telecommunications Standards
   Institute (ETSI) NFV document [ETS14b].  Some of these terms, and
   others commonly used in this document, are defined below.

   NFV:  Network Function Virtualization - The principle of separating
      network functions from the hardware they run on by using virtual
      hardware abstraction.

   NFVI PoP:  NFV Infrastructure Point of Presence - Any combination of
      virtualized compute, storage and network resources.

   NFVI:  NFV Infrastructure - Collection of NFVI PoPs under one
      orchestrator.

   VIM:  Virtualized Infrastructure Manager - functional block that is
      responsible for controlling and managing the NFVI compute, storage
      and network resources, usually within one operator's
      Infrastructure Domain (e.g.  NFVI-PoP).

   VNFM:  Virtualized Network Function Manager - functional block that
      is responsible for controlling and managing the VNF life-cycle.

   NFVO:  NFV Orchestrator - functional block that manages the Network
      Service (NS) life-cycle and coordinates the management of NS life-
      cycle, VNF life-cycle (supported by the VNFM) and NFVI resources




Rosa, et al.            Expires December 13, 2018               [Page 3]

Internet-Draft                  VNFBench                       June 2018


      (supported by the VIM) to ensure an optimized allocation of the
      necessary resources and connectivity.

   VNF:  Virtualized Network Function - a software-based network
      function.

   VNFD:  Virtualised Network Function Descriptor - configuration
      template that describes a VNF in terms of its deployment and
      operational behaviour, and is used in the process of VNF on-
      boarding and managing the life cycle of a VNF instance.

   VNF-FG:  Virtualized Network Function Forwarding Graph - an ordered
      list of VNFs creating a service chain.

3.  Scope

   This document assumes VNFs as black boxes when defining VNF
   benchmarking methodologies.  White box approaches are assumed and
   analysed as a particular case under proper considerations of internal
   VNF instrumentation.

   In what follows, this document scopes a methodology for VNF
   benchmarking concerning automation purposes.

4.  Considerations

   VNF benchmarking considerations are defined in [RFC8172].
   Additionally, VNF pre-deployment testing considerations are well
   explored in [ETS14c].

4.1.  VNF Testing Methods

   Following the ETSI's model in [ETS14c], we distinguish three methods
   for VNF evaluation:

   Benchmarking:  Where parameters (e.g., cpu, memory, storage) are
      provided and the corresponding performance metrics (e.g., latency,
      throughput) are obtained.  Note, such request might create
      multiple reports, for example, with minimal latency or maximum
      throughput results.

   Verification:  Both parameters and performance metrics are provided
      and a stimulus verify if the given association is correct or not.

   Dimensioning:  Where performance metrics are provided and the
      corresponding parameters obtained.  Note, multiple deployment
      interactions may be required, or if possible, underlying allocated
      resources need to be dynamically altered.



Rosa, et al.            Expires December 13, 2018               [Page 4]

Internet-Draft                  VNFBench                       June 2018


   Note: Verification and Dimensioning can be reduced to Benchmarking.
   Therefore, we detail Benchmarking in what follows.

4.2.  Generic VNF Benchmarking Setup

   A generic VNF benchmarking setup is shown in Figure 1, and its
   components are explained below.  Note here, not all components are
   mandatory, and VNF benchmarking scenarios, further explained, can
   dispose components in varied settings.


                              +---------------+
                              |    Manager    |
                Control       | (Coordinator) |
                Interface     +---+-------+---+
             +--------+-----------+       +-------------------+
             |        |                                       |
             |        |   +-------------------------+         |
             |        |   |    System Under Test    |         |
             |        |   |                         |         |
             |        |   |    +-----------------+  |         |
             |     +--+------- +                 |  |         |
             |     |           |       VNF       |  |         |
             |     |           |                 |  |         |
             |     |           +----.---------.--+  |         |
       +-----+---+ |  Monitor  |    :         :     |   +-----+----+
       | Agent   | |{listeners}|----^---------V--+  |   |  Agent   |
       |(Sender) | |           |    Execution    |  |   |(Receiver)|
       |         | |           |   Environment   |  |   |          |
       |{Probers}| +-----------|                 |  |   |{Probers} |
       +-----.---+        |    +----.---------.--+  |   +-----.----+
             :            +---------^---------V-----+         :
             V                      :         :               :
             :................>.....:         :............>..:
             Stimulus Traffic Flow


                 Figure 1: Generic VNF Benchmarking Setup

   Agent --  executes active stimulus using probers, benchmarking tools,
      to benchmark and collect network and system performance metrics.
      While a single Agent is capable of performing localized benchmarks
      (e.g., stress tests on CPU, memory, disk I/O), the interaction
      among distributed Agents enable the generation and collection of
      end-to-end metrics (e.g., frame loss rate, latency).  In a
      deployment scenario, one Agent can create the benchmark stimuli
      and the other end be the VNF itself where, for example, one-way
      latency is evaluated.  A prober defines a software/hardware-based



Rosa, et al.            Expires December 13, 2018               [Page 5]

Internet-Draft                  VNFBench                       June 2018


      tool able to generate traffic specific to a VNF (e.g., sipp) or
      generic to multiple VNFs (e.g., pktgen).  An Agent can be defined
      by a physical or virtual network function.

   Monitor --  when possible, it is instantiated inside the target VNF
      or NFVI PoP (e.g., as a plug-in process in a virtualized
      environment) to perform passive monitoring, using listeners, for
      metrics collection based on benchmark tests evaluated according to
      Agents` stimuli.  Different from the active approach of Agents
      that can be seen as generic benchmarking VNFs, monitor observes
      particular properties according to NFVI PoPs and VNFs
      capabilities.  A listener defines one or more interfaces for the
      extraction of particular metrics monitored in a target VNF and/or
      execution environment.  Logically, a Monitor is defined by as a
      virtual network function.

   Manager --  in a VNF benchmarking deployment scenario, is responsible
      for (i) the coordination and synchronization of activities of
      Agents and Monitors, (ii) collecting and parsing all VNF
      benchmarking results, and (iii) aggregating the inputs and parsed
      benchmark outputs to construct a VNF performance profile, report
      that correlates the VNF stimuli and the monitored metrics.  A
      Manager executes the main configuration, operation and management
      actions to deliver the VNF benchmarking results.  A Manager can be
      defined by a physical or virtual network function.

   Virtualized Network Function (VNF) --  consists of one or more
      software components adequate for performing a network function
      according to allocated virtual resources and satisfied
      requirements in an execution environment.  A VNF can demand
      particular configurations for benchmarking specifications,
      demonstrating variable performance profiles based on available
      virtual resources/parameters and configured enhancements targeting
      specific technologies.

   Execution Environment --  defines a virtualized and controlled
      composition of capabilities necessary for the execution of a VNF.
      An execution environment stands as a general purpose level of
      virtualization with abstracted resources available for one or more
      VNFs.  It can also define specific technology habilitation,
      incurring in viable settings for enhancing VNF performance
      profiles.

4.3.  Deployment Scenarios

   A VNF benchmark deployment scenario establishes the physical and/or
   virtual instantiation of components defined in a VNF benchmarking
   setup.



Rosa, et al.            Expires December 13, 2018               [Page 6]

Internet-Draft                  VNFBench                       June 2018


   Based on a generic VNF benchmarking setup, the following
   considerations hold for deployment scenarios:

   o  Components can be composed in a single entity and defined as black
      or white boxes.  For instance, Manager and Agents could jointly
      define one hardware/software entity to perform a VNF benchmark and
      present results.

   o  Monitor is not a mandatory component and must be considered only
      when performed white box benchmarking approaches for a VNF and/or
      its execution environment.

   o  Monitor can be defined by multiple instances of software
      components, each addressing a VNF or execution environment and
      their respective open interfaces for the extraction of metrics.

   o  Agents can be disposed in varied topology setups, included the
      possibility of multiple input and output ports of a VNF being
      directly connected each in one Agent.

   o  All benchmarking components defined in a deployment scenario must
      perform the synchronization of clocks to an international time
      standard.

4.4.  Influencing Aspects

   In general, VNF benchmarks must capture relevant causes of
   performance variability.  Examples of VNF performance influencing
   aspects can be observed in:

   Deployment Scenario Topology:  The orchestrated disposition of
      components can define particular interconnections among them
      composing a specific case/method of VNF benchmarking.

   Execution Environment:  The availability of generic and specific
      capabilities satisfying VNF requirements define a skeleton of
      opportunities for the allocation of VNF resources.  In addition,
      particular cases can define multiple VNFs interacting in the same
      execution environment of a benchmarking setup.

   VNF:  A detailed description of functionalities performed by a VNF
      sets possible traffic forwarding and processing operations it can
      perform on packets, added to its running requirements and specific
      configurations, which might affect and compose a benchmarking
      setup.

   Agent:  The toolset available for benchmarking stimulus for a VNF and
      its characteristics of packets format, disposition, and workload



Rosa, et al.            Expires December 13, 2018               [Page 7]

Internet-Draft                  VNFBench                       June 2018


      can interfere in a benchmarking setup.  VNFs can support specific
      traffic format as stimulus.

   Monitor:  In a particular benchmarking setup where measurements of
      VNF and/or execution environment metrics are available for
      extraction, an important analysis consist in verifying if the
      Monitor components can impact performance metrics of the VNF and
      the underlying execution environment.

   Manager:  The overall composition of VNF benchmarking procedures can
      determine arrangements of internal states inside a VNF, which can
      interfere in observed benchmark metrics.

5.  Methodology

   Portability as a intrinsic characteristic of VNFs, allow them to be
   deployed in multiple environments, enabling, even parallel,
   benchmarking procedures in varied deployment scenarios.  A VNF
   benchmarking methodology must be described in a clear and objective
   manner in order to allow effective repeatability and comparability of
   the test results defined by a VNF Benchmarking Report (VNF-BR).

   VNF Benchmarking reports are comprised of two parts:

   VNF Benchmarking Descriptor (VNF-BD) --   contains all required
      definitions and requirements to configure, execute and reproduce
      VNF benchmarking experiments.

   VNF Performance Profile (VNF-PP) --   contains additional parameters
      concerning a benchmarking deployment scenario and measured metrics
      resulting from its execution, facilitating comparability.

   The content of each part of a VNF-BR is described in the following
   sections.

5.1.  VNF Benchmarking Descriptor (VNF-BD)

   "VNF Benchmarking Descriptor (VNF-BD) --"> a setup that specifies a
   method of how to measure a VNF Performance Profile.  The
   specification includes structural and functional instructions, and
   variable parameters at different abstractions (e.g., topology of the
   deployment scenario, benchmarking target metrics, parameters of
   benchmarking components).  VNF-BD may be specific to a VNF or
   applicable to several VNF types.  A VNF-BD can be used to elaborate a
   VNF benchmark deployment scenario aiming the extraction of particular
   VNF performance metrics.

   The following items define the VNF-BD contents.



Rosa, et al.            Expires December 13, 2018               [Page 8]

Internet-Draft                  VNFBench                       June 2018


5.1.1.  Procedures Configuration

   The definition of parameters concerning the execution of the
   benchmarking procedures (see Section 5.3), for instance, containing
   the number of repetitions and duration of each test.

5.1.2.  Target Information

   General information addressing the target VNF, with references to any
   of its specific characteristics (e.g., type, model, version/release,
   architectural components, etc).  In addition, it defines the target
   metrics to be extracted when running the benchmarking tests.

5.1.3.  Deployment Scenario

5.1.3.1.  Topology

   Information about the experiment topology, concerning the disposition
   of the components in a benchmarking setup (see Section 4.2).  It must
   define the role of each component and how they are interconnected
   (i.e., port, link and network characteristics).

5.1.3.2.  Requirements

   Involves the definition of execution environment requirements to
   execute the tests.  Therefore, they concern all required capabilities
   needed for the execution of the target VNF and the other components
   composing the benchmarking setup.  Examples of specifications
   involve: min/max allocation of resources, specific enabling
   technologies (e.g., DPDK, SR-IOV, PCIE).

5.1.3.3.  Parameters

   Involves any specific configuration of benchmarking components in a
   setup described the the deployment scenario topology.

   VNF:   Defines any specific configuration that must be loaded into
      the VNF for the benchmarking experiments (e.g., routing table,
      firewall rules, vIMS subscribers profile).

   Agents:   Defines the configured toolset of available probers and
      related benchmarking/active metrics, available workloads, traffic
      formats/traces, and configurations to enable hardware capabilities
      (if existent).

   Monitors:   defines the configured toolset of available listeners and
      related monitoring/passive metrics, configuration of the
      interfaces with the monitoring target (VNF and/or execution



Rosa, et al.            Expires December 13, 2018               [Page 9]

Internet-Draft                  VNFBench                       June 2018


      environment), and configurations to enable hardware capabilities
      (if existent).

5.2.  VNF Performance Profile (VNF-PP)

   "VNF Performance Profile: (VNF-PP) --"> defines a mapping between VNF
   allocated capabilities (e.g., cpu, memory) and the VNF performance
   metrics (e.g., throughput, latency between in/out ports) obtained in
   a benchmarking test elaborated based on a VNF-BD.  Logically, packet
   processing metrics are presented in a specific format addressing
   statistical significance where a correspondence among VNF parameters
   and the delivery of a measured/qualified VNF performance exists.

   The following items define the VNF-PP contents.

5.2.1.  Execution Environment

   Fulfilling the deployment scenario requirements specified in the VNF-
   BD, concerns the descriptions of each element deployed in an actual
   benchmarking deployment scenario exercised to generate a VNF-PP.

   Ideally, any person in possession of such annotations, (VNF-BD and
   VNF-PP execution environment) and all the necessary/associated
   skeleton of hardware and software components, should be able to
   reproduce the same deployment scenario and VNF benchmarking tests to
   obtain comparable/similar VNF-PP measurement results.

   If not fixed by the VNF-DB execution environment requirements, for
   each component in the VNF benchmarking setup, the following topics
   must be detailed:

   Hardware Specs:   Contains any information associated with the
      underlying hardware capabilities offered and used by the component
      during the benchmarking tests.  Examples of such specification
      include allocated CPU architecture, connected NIC specs, allocated
      memory DIMM, etc.  In addition any information concerning details
      of resource isolation must also be described as a specification.

   Software Specs:   Contains any information associated with the
      software apparatus offered and used by the component during the
      benchmarking tests.  Examples include versions of Operating
      System, Kernel and hypervisor, container image versions, etc.

   Optionally, a VNF-PP execution environment would contain references
   to an orchestration description document (e.g., HEAT template) to
   clarify technological aspects of the execution environment and any
   specific parameters that it might contain for the VNF-PP.




Rosa, et al.            Expires December 13, 2018              [Page 10]

Internet-Draft                  VNFBench                       June 2018


5.2.2.  Measurement Results

   Measurement results concern the extracted metrics, output of
   benchmarking procedures, classified into:

   VNF Processing/Active Metrics:   Concerns metrics explicitly defined
      by or extracted from direct interactions with a VNF.  Those can be
      defined as generic network packet processing related metrics
      (e.g., throughput, latency) or VNF specific metrics (e.g., vIMS
      confirmed transactions, DNS replies).

   VNF Monitored/Passive Metrics:   Concerns the metrics infered from a
      VNF execution, classified according to the virtualization level
      (e.g., baremetal, VM, container) and technology domain (e.g.,
      related to CPU, memory, disk) from where they were obtained.

5.3.  Automated Benchmarking Procedures

   The case of a VNF benchmarking address the possibility of defining
   distinct aspects/steps, which can be automated or not:

   Orchestration:   placement (assignment/allocation of resources) and
      interconnection (physical/virtual) of network function(s) and
      benchmark components (e.g., OpenStack/Kubernetes templates, NFV
      description solutions, like OSM, SONATA, ONAP) -> Defines
      deployment scenario.

   Management/Configuration:   benchmark components and VNF are
      configured to execute the experiment/test (e.g., populate routing
      table, load pcap source files in agent) -> Defines method/test/
      trial.

   Execution:   Tests/experiments are executed according to
      configuration and orchestrated components -> Runs specific
      benchmark case.

   Output:   There might be generic VNF footprint metrics (e.g., CPU,
      memory) and specific VNF traffic processing metrics (e.g.,
      transactions, throughput, ).  Output processing must be taken into
      account (e.g., if sampling is applied or not) in a generic
      (statistics) or specific (clustering) ways -> Generates metrics
      report.

   For the purposes of dissecting the execution procedures, consider the
   following definitions:

   Trial:   Consists in a single process or iteration to obtain VNF
      benchmarking metrics as a singular measurement.



Rosa, et al.            Expires December 13, 2018              [Page 11]

Internet-Draft                  VNFBench                       June 2018


   Test:   Defines strict parameters for benchmarking components perform
      one or more trials.

   Method:   Consists of a VNF-BD targeting one or more Tests to achieve
      VNF benchmarking measurements.  A Method explicits ranges of
      parameter values for the configuration of benchmarking components
      realized in a Test.

   The following sequence of events compose basic general procedures
   that must be performed for the execution of a VNF benchmarking test.

   1.   The sketch of a VNF benchmarking setup must be defined to later
      be translated into a deployment scenario.  Such sketch must
      contain all the structural and functional settings composing a
      VNF-BD.  At the end of this step the complete Method of
      benchmarking the target VNF is defined.

   2.   Via an automated orchestrator or in a manual process, all the
      components of the VNF benchmark setup must be allocated and
      interconnected.  VNF and the execution environment must be
      configured to properly address the VNF benchmark stimuli.

   3.   Manager, Agent(s) and Monitor(s) (if existent), must be started
      and configured to execute the benchmark stimuli and retrieve
      expected/target metrics captured during and at the end of the VNF
      benchmarking test.  One or more trials realize the measurement of
      VNF performance metrics.

   4.   Output results from each obtained benchmarking test must be
      received by Manager.  In an automated or manual process, intended
      metrics to be extracted defined in the VNF-BD must compose a VNF-
      PP, resulting in a VNF benchmark report.

5.4.  Particular Cases

   Configurations and procedures concerning particular cases of VNF
   benchmarks address testing methodologies proposed in [RFC8172].  In
   addition to the general description previously defined, some details
   must be taken into consideration in the following VNF benchmarking
   cases.

   Noisy Neighbor:   An Agent can detain the role of a noisy neighbor,
      generating a particular workload in synchrony with a benchmarking
      procedure over a VNF.  Adjustments of the noisy workload stimulus
      type, frequency, virtualization level, among others, must be
      detailed in the VNF-BD.





Rosa, et al.            Expires December 13, 2018              [Page 12]

Internet-Draft                  VNFBench                       June 2018


   Representative Capacity:   An average value of workload must be
      specified as an Agent stimulus.  Considering a long-term analysis,
      the VNF must be configured to properly address a desired average
      behavior of performance in comparison with the value of the
      workload stimulus.

   Flexibility and Elasticity:   Having the possibility of a VNF be
      composed by multiple components, internal events of the VNF might
      trigger variated behaviors activating functionalities associated
      with elasticity, such as load balancing.  In this terms, a
      detailed characterization of a VNF must be specified and be
      contained in the VNF-PP and benchmarking report.

   On Failures:   Similarly to the case before, benchmarking setups of
      VNF must also capture the dynamics involved in the VNF behavior.
      In case of failures, a VNF would restart itself and possibly
      result in a off-line period.  A VNF-PP and benchmarking report
      must clearly capture such variation of VNF states.

   White Box VNF:   A benchmarking setup must define deployment
      scenarios to be compared with and without monitor components into
      the VNF and/or the execution environment, in order to analyze if
      the VNF performance is affected.  The VNF-PP and benchmarking
      report must contain such analysis of performance variability,
      together with all the targeted VNF performance metrics.

6.  VNF Benchmark Report

   On the extraction of VNF and execution environment performance
   metrics various trials must be performed for statistical significance
   of the obtained benchmarking results.  Each trial must be executed
   following a particular deployment scenario composed by a VNF-BD.

   A VNF Benchmarking Report correlates structural and functional
   parameters of VNF-BD with targeted/extracted VNF benchmarking metrics
   of the obtained VNF-PP.

   A VNF performance profile must address the combined set of classified
   items in the 3x3 Matrix Coverage defined in [RFC8172].

7.  Open Source Reference Implementations

   There are two open source reference implementations that are build to
   automate benchmarking of Virtualized Network Functions (VNFs).







Rosa, et al.            Expires December 13, 2018              [Page 13]

Internet-Draft                  VNFBench                       June 2018


7.1.  Gym

   The software, named Gym, is a framework for automated benchmarking of
   Virtualized Network Functions (VNFs).  It was coded following the
   initial ideas presented in a 2015 scientific paper entitled "VBaaS:
   VNF Benchmark-as-a-Service" [Rosa-a].  Later, the evolved design and
   prototyping ideas were presented at IETF/IRTF meetings seeking impact
   into NFVRG and BMWG.

   Gym was built to receive high-level test descriptors and execute them
   to extract VNFs profiles, containing measurements of performance
   metrics - especially to associate resources allocation (e.g., vCPU)
   with packet processing metrics (e.g., throughput) of VNFs.  From the
   original research ideas [Rosa-a], such output profiles might be used
   by orchestrator functions to perform VNF lifecycle tasks (e.g.,
   deployment, maintenance, tear-down).

   The proposed guiding principles, elaborated in [Rosa-b], to design
   and build Gym can be compounded in multiple practical ways for
   multiple VNF testing purposes:

   o  Comparability: Output of tests shall be simple to understand and
      process, in a human-read able format, coherent, and easily
      reusable (e.g., inputs for analytic applications).

   o  Repeatability: Test setup shall be comprehensively defined through
      a flexible design model that can be interpreted and executed by
      the testing platform repeatedly but supporting customization.

   o  Configurability: Open interfaces and extensible messaging models
      shall be available between components for flexible composition of
      test descriptors and platform configurations.

   o  Interoperability: Tests shall be ported to different environments
      using lightweight components.

   In [Rosa-b] Gym was utilized to benchmark a decomposed IP Multimedia
   Subsystem VNF.  And in [Rosa-c], a virtual switch (Open vSwitch -
   OVS) was the target VNF of Gym for the analysis of VNF benchmarking
   automation.  Such articles validated Gym as a prominent open source
   reference implementation for VNF benchmarking tests.  Such articles
   set important contributions as discussion of the lessons learned and
   the overall NFV performance testing landscape, included automation.

   Gym stands as one open source reference implementation that realizes
   the VNF benchmarking methodologies presented in this document.  Gym
   is being released open source at [Gym].  The code repository includes




Rosa, et al.            Expires December 13, 2018              [Page 14]

Internet-Draft                  VNFBench                       June 2018


   also VNF Benchmarking Descriptor (VNF-BD) examples on the vIMS and
   OVS targets as described in [Rosa-b] and [Rosa-c].

7.2.  tng-prf

   Another software that focuses on implementing a framework to
   benchmark VNFs is called "tng-prf" (previously "son-profile") and was
   developed as part of the two European Union H2020 projects SONATA NFV
   and 5GTANGO [tango].  Its initial ideas were presented in [Peu-a] and
   the system design of the end-to-end prototype was presented in
   [Peu-b].

   Tng-prf's aims to act as a framework for the end-to-end automation of
   VNF benchmarking processes.  Its goal is to automate the benchmarking
   process in such a way that VNF-PPs can be generated without further
   human interaction.  This enables the integration of VNF benchmarking
   into continuous integration and continuous delivery (CI/CD) pipelines
   so that new VNF-PPs are generated on-the-fly for every new software
   version of a VNF.  Those automatically generated VNF-PPs can then be
   bundled with the VNFs and serve as inputs for orchestration systems,
   fitting to the original research ideas presented in [Rosa-a] and
   [Peu-a].

   Following the same high-level VNF testing purposes as Gym, namely:
   Comparability, repeatability, configurability, and interoperability,
   tng-prf specifically aims to explore description approaches for VNF
   benchmarking experiments.  In [Peu-b] a prototype specification VNF-
   BDs is presented which not only allows to specify generic, abstract
   VNF benchmarking experiments, it also allows to describe sets of
   parameter configurations to be tested during the benchmarking
   process, allowing the system to automatically execute complex
   parameter studies on the SUT, e.g., testing a VNF's performance under
   different CPU, memory, or software configurations.

   Tng-prf was used to perform a set of initial benchmarking experiments
   using different VNFs, like a Squid proxy, an Nginx load balancer, and
   a Socat TCP relay in [Peu-b].  Those VNFs have not only been
   benchmarked in isolation, but also in combined setups in which up to
   three VNFs were chained one after each other.  These experiments were
   used to test tng-prf for scenarios in which composed VNFs, consisting
   of multiple virtual deployment units (VDUs), have to be benchmarked.
   The presented results highlight the need to benchmark composed VNFs
   in end-to-end scenarios rather than only benchmark each individual
   component in isolation, to produce meaningful VNF-PPs for the
   complete VNF.

   Tng-prf is actively developed and released as open source tool under
   Apache 2.0 license [tng-prf].



Rosa, et al.            Expires December 13, 2018              [Page 15]

Internet-Draft                  VNFBench                       June 2018


8.  Security Considerations

   TBD

9.  IANA Considerations

   This document does not require any IANA actions.

10.  Acknowledgement

   The authors would like to thank the support of Ericsson Research,
   Brazil.  Parts of this work have received funding from the European
   Union's Horizon 2020 research and innovation programme under grant
   agreement No.  H2020-ICT-2016-2 761493 (5GTANGO: https://5gtango.eu).

11.  References

11.1.  Normative References

   [ETS14a]   ETSI, "Architectural Framework - ETSI GS NFV 002 V1.2.1",
              Dec 2014, <http://www.etsi.org/deliver/etsi\_gs/
              NFV/001\_099/002/01.02.01-\_60/gs\_NFV002v010201p.pdf>.

   [ETS14b]   ETSI, "Terminology for Main Concepts in NFV - ETSI GS NFV
              003 V1.2.1", Dec 2014,
              <http://www.etsi.org/deliver/etsi_gs/NFV/001_099-
              /003/01.02.01_60/gs_NFV003v010201p.pdf>.

   [ETS14c]   ETSI, "NFV Pre-deployment Testing - ETSI GS NFV TST001
              V1.1.1", April 2016,
              <http://docbox.etsi.org/ISG/NFV/Open/DRAFTS/TST001_-_Pre-
              deployment_Validation/NFV-TST001v0015.zip>.

   [RFC1242]  S. Bradner, "Benchmarking Terminology for Network
              Interconnection Devices", July 1991,
              <https://www.rfc-editor.org/info/rfc1242>.

   [RFC8172]  A. Morton, "Considerations for Benchmarking Virtual
              Network Functions and Their Infrastructure", July 2017,
              <https://www.rfc-editor.org/info/rfc8172>.

   [RFC8204]  M. Tahhan, B. O'Mahony, A. Morton, "Benchmarking Virtual
              Switches in the Open Platform for NFV (OPNFV)", September
              2017, <https://www.rfc-editor.org/info/rfc8204>.







Rosa, et al.            Expires December 13, 2018              [Page 16]

Internet-Draft                  VNFBench                       June 2018


11.2.  Informative References

   [Gym]      "Gym Home Page", <https://github.com/intrig-unicamp/gym>.

   [Peu-a]    M. Peuster, H. Karl, "Understand Your Chains: Towards
              Performance Profile-based Network Service Management",
              Fifth European Workshop on Software Defined Networks
              (EWSDN) , 2016,
              <http://ieeexplore.ieee.org/document/7956044/>.

   [Peu-b]    M. Peuster, H. Karl, "Profile Your Chains, Not Functions:
              Automated Network Service Profiling in DevOps
              Environments", IEEE Conference on Network Function
              Virtualization and Software Defined Networks (NFV-SDN) ,
              2017, <http://ieeexplore.ieee.org/document/8169826/>.

   [Rosa-a]   R. V. Rosa, C. E. Rothenberg, R. Szabo, "VBaaS: VNF
              Benchmark-as-a-Service", Fourth European Workshop on
              Software Defined Networks , Sept 2015,
              <http://ieeexplore.ieee.org/document/7313620>.

   [Rosa-b]   R. Rosa, C. Bertoldo, C. Rothenberg, "Take your VNF to the
              Gym: A Testing Framework for Automated NFV Performance
              Benchmarking", IEEE Communications Magazine Testing
              Series , Sept 2017,
              <http://ieeexplore.ieee.org/document/8030496>.

   [Rosa-c]   R. V. Rosa, C. E. Rothenberg, "Taking Open vSwitch to the
              Gym: An Automated Benchmarking Approach", IV Workshop pre-
              IETF/IRTF, CSBC Brazil, July 2017,
              <https://intrig.dca.fee.unicamp.br/wp-
              content/plugins/papercite/pdf/rosa2017taking.pdf>.

   [tango]    "5GTANGO: Development and validation platform for global
              industry-specific network services and apps",
              <https://5gtango.eu>.

   [tng-prf]  "5GTANGO Profiler Page",
              <https://github.com/sonata-nfv/tng-sdk-profile>.

Authors' Addresses










Rosa, et al.            Expires December 13, 2018              [Page 17]

Internet-Draft                  VNFBench                       June 2018


   Raphael Vicente Rosa (editor)
   University of Campinas
   Av. Albert Einstein, 400
   Campinas, Sao Paulo  13083-852
   Brazil

   Email: rvrosa@dca.fee.unicamp.br
   URI:   https://intrig.dca.fee.unicamp.br/raphaelvrosa/


   Christian Esteve Rothenberg
   University of Campinas
   Av. Albert Einstein, 400
   Campinas, Sao Paulo  13083-852
   Brazil

   Email: chesteve@dca.fee.unicamp.br
   URI:   http://www.dca.fee.unicamp.br/~chesteve/


   Manuel Peuster
   Paderborn University
   Warburgerstr. 100
   Paderborn  33098
   Germany

   Email: manuel.peuster@upb.de
   URI:   http://go.upb.de/peuster


   Holger Karl
   Paderborn University
   Warburgerstr. 100
   Paderborn  33098
   Germany

   Email: holger.karl@upb.de
   URI:   https://cs.uni-paderborn.de/cn/













Rosa, et al.            Expires December 13, 2018              [Page 18]
